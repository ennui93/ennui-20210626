--- ipc/chromium/src/third_party/libevent/arc4random.c.orig	2016-01-30 18:44:33.403759139 +0100
+++ ipc/chromium/src/third_party/libevent/arc4random.c	2016-01-30 18:45:03.988758062 +0100
@@ -58,9 +58,6 @@
 #include <unistd.h>
 #include <sys/param.h>
 #include <sys/time.h>
-#ifdef _EVENT_HAVE_SYS_SYSCTL_H
-#include <sys/sysctl.h>
-#endif
 #endif
 #include <limits.h>
 #include <stdlib.h>
@@ -167,85 +164,6 @@
 }
 #endif
 
-#if defined(_EVENT_HAVE_SYS_SYSCTL_H) && defined(_EVENT_HAVE_SYSCTL)
-#if _EVENT_HAVE_DECL_CTL_KERN && _EVENT_HAVE_DECL_KERN_RANDOM && _EVENT_HAVE_DECL_RANDOM_UUID
-#define TRY_SEED_SYSCTL_LINUX
-static int
-arc4_seed_sysctl_linux(void)
-{
-	/* Based on code by William Ahern, this function tries to use the
-	 * RANDOM_UUID sysctl to get entropy from the kernel.  This can work
-	 * even if /dev/urandom is inaccessible for some reason (e.g., we're
-	 * running in a chroot). */
-	int mib[] = { CTL_KERN, KERN_RANDOM, RANDOM_UUID };
-	unsigned char buf[ADD_ENTROPY];
-	size_t len, n;
-	unsigned i;
-	int any_set;
-
-	memset(buf, 0, sizeof(buf));
-
-	for (len = 0; len < sizeof(buf); len += n) {
-		n = sizeof(buf) - len;
-
-		if (0 != sysctl(mib, 3, &buf[len], &n, NULL, 0))
-			return -1;
-	}
-	/* make sure that the buffer actually got set. */
-	for (i=0,any_set=0; i<sizeof(buf); ++i) {
-		any_set |= buf[i];
-	}
-	if (!any_set)
-		return -1;
-
-	arc4_addrandom(buf, sizeof(buf));
-	memset(buf, 0, sizeof(buf));
-	arc4_seeded_ok = 1;
-	return 0;
-}
-#endif
-
-#if _EVENT_HAVE_DECL_CTL_KERN && _EVENT_HAVE_DECL_KERN_ARND
-#define TRY_SEED_SYSCTL_BSD
-static int
-arc4_seed_sysctl_bsd(void)
-{
-	/* Based on code from William Ahern and from OpenBSD, this function
-	 * tries to use the KERN_ARND syscall to get entropy from the kernel.
-	 * This can work even if /dev/urandom is inaccessible for some reason
-	 * (e.g., we're running in a chroot). */
-	int mib[] = { CTL_KERN, KERN_ARND };
-	unsigned char buf[ADD_ENTROPY];
-	size_t len, n;
-	int i, any_set;
-
-	memset(buf, 0, sizeof(buf));
-
-	len = sizeof(buf);
-	if (sysctl(mib, 2, buf, &len, NULL, 0) == -1) {
-		for (len = 0; len < sizeof(buf); len += sizeof(unsigned)) {
-			n = sizeof(unsigned);
-			if (n + len > sizeof(buf))
-			    n = len - sizeof(buf);
-			if (sysctl(mib, 2, &buf[len], &n, NULL, 0) == -1)
-				return -1;
-		}
-	}
-	/* make sure that the buffer actually got set. */
-	for (i=any_set=0; i<sizeof(buf); ++i) {
-		any_set |= buf[i];
-	}
-	if (!any_set)
-		return -1;
-
-	arc4_addrandom(buf, sizeof(buf));
-	memset(buf, 0, sizeof(buf));
-	arc4_seeded_ok = 1;
-	return 0;
-}
-#endif
-#endif /* defined(_EVENT_HAVE_SYS_SYSCTL_H) */
-
 #ifdef __linux__
 #define TRY_SEED_PROC_SYS_KERNEL_RANDOM_UUID
 static int
@@ -340,16 +258,6 @@
 	if (0 == arc4_seed_proc_sys_kernel_random_uuid())
 		ok = 1;
 #endif
-#ifdef TRY_SEED_SYSCTL_LINUX
-	/* Apparently Linux is deprecating sysctl, and spewing warning
-	 * messages when you try to use it. */
-	if (!ok && 0 == arc4_seed_sysctl_linux())
-		ok = 1;
-#endif
-#ifdef TRY_SEED_SYSCTL_BSD
-	if (0 == arc4_seed_sysctl_bsd())
-		ok = 1;
-#endif
 	return ok ? 0 : -1;
 }
 
